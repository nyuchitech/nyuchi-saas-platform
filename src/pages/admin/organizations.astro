---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
---

<Layout title="Organization Management - Admin Dashboard">
  <Header />
  
  <main class="min-h-screen bg-gray-50">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Page Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Organization Management</h1>
            <p class="text-gray-600">Manage customer organizations and their settings</p>
          </div>
          <button onclick="showCreateOrgModal()" class="btn btn-primary">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Create Organization
          </button>
        </div>
      </div>

      <!-- Filters -->
      <div class="bg-white rounded-lg shadow mb-6 p-4">
        <div class="flex flex-wrap gap-4">
          <div>
            <label for="status-filter" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
            <select id="status-filter" class="form-select" onchange="loadOrganizations()">
              <option value="">All Statuses</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
              <option value="deleted">Deleted</option>
            </select>
          </div>
          <div>
            <label for="plan-filter" class="block text-sm font-medium text-gray-700 mb-1">Plan</label>
            <select id="plan-filter" class="form-select" onchange="loadOrganizations()">
              <option value="">All Plans</option>
              <option value="free">Free</option>
              <option value="pro">Pro</option>
              <option value="business">Business</option>
              <option value="enterprise">Enterprise</option>
            </select>
          </div>
          <div class="flex items-end">
            <button onclick="loadOrganizations()" class="btn btn-secondary">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh
            </button>
          </div>
        </div>
      </div>

      <!-- Organizations Table -->
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-bold text-gray-900">Organizations</h3>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Organization</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Plan</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Users</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Products</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody id="organizations-table" class="bg-white divide-y divide-gray-200">
              <!-- Organizations will be loaded here -->
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <div class="bg-white px-4 py-3 border-t border-gray-200 sm:px-6">
          <div class="flex items-center justify-between">
            <div class="flex-1 flex justify-between sm:hidden">
              <button onclick="previousPage()" class="btn btn-secondary">Previous</button>
              <button onclick="nextPage()" class="btn btn-secondary">Next</button>
            </div>
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p class="text-sm text-gray-700">
                  Showing <span id="showing-from">1</span> to <span id="showing-to">10</span> of <span id="total-orgs">0</span> results
                </p>
              </div>
              <div>
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                  <button onclick="previousPage()" class="btn btn-secondary rounded-r-none">Previous</button>
                  <span id="page-info" class="px-4 py-2 bg-white border-t border-b border-gray-300 text-sm text-gray-700">Page 1</span>
                  <button onclick="nextPage()" class="btn btn-secondary rounded-l-none">Next</button>
                </nav>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Organization Modal -->
    <div id="create-org-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen px-4">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full">
          <div class="p-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">Create New Organization</h3>
            
            <form id="create-org-form">
              <div class="mb-4">
                <label for="org-name" class="block text-sm font-medium text-gray-700 mb-2">Organization Name</label>
                <input type="text" id="org-name" required maxlength="100"
                       class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                       placeholder="Acme Corporation">
              </div>
              
              <div class="mb-4">
                <label for="org-description" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                <textarea id="org-description" rows="3" maxlength="500"
                          class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                          placeholder="Brief description of the organization"></textarea>
              </div>
              
              <div class="mb-6">
                <label for="org-plan" class="block text-sm font-medium text-gray-700 mb-2">Initial Plan</label>
                <select id="org-plan" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                  <option value="free">Free Plan</option>
                  <option value="pro">Pro Plan</option>
                  <option value="business">Business Plan</option>
                  <option value="enterprise">Enterprise Plan</option>
                </select>
              </div>
              
              <div class="flex space-x-3">
                <button type="button" onclick="hideCreateOrgModal()" class="flex-1 btn btn-secondary">Cancel</button>
                <button type="submit" class="flex-1 btn btn-primary">Create Organization</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Organization Details Modal -->
    <div id="org-details-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen px-4">
        <div class="bg-white rounded-lg shadow-xl max-w-4xl w-full">
          <div class="p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 id="org-details-title" class="text-lg font-bold text-gray-900">Organization Details</h3>
              <button onclick="hideOrgDetailsModal()" class="text-gray-400 hover:text-gray-500">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            
            <div id="org-details-content" class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Organization details will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    // Organization management functions
    let currentPage = 1;
    let totalPages = 1;

    async function loadOrganizations(page = 1) {
      try {
        const statusFilterEl = document.getElementById('status-filter') as HTMLSelectElement;
        const planFilterEl = document.getElementById('plan-filter') as HTMLSelectElement;
        
        const statusFilter = statusFilterEl?.value || '';
        const planFilter = planFilterEl?.value || '';

        const response = await fetch('/api/organizations/list', {
          method: 'POST',
          headers: {
            'Authorization': 'Bearer admin-token',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            page,
            limit: 20,
            status_filter: statusFilter || undefined,
            plan_filter: planFilter || undefined
          })
        });

        if (response.ok) {
          const data = await response.json();
          displayOrganizations(data.data.organizations);
          updatePagination(data.data.pagination);
        } else {
          alert('Failed to load organizations');
        }
      } catch (error) {
        alert('Error loading organizations');
      }
    }

    function displayOrganizations(organizations) {
      const tbody = document.getElementById('organizations-table');
      if (!tbody) return;
      
      tbody.innerHTML = '';

      organizations.forEach(org => {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50';

        const statusBadge = getStatusBadge(org.status);
        const planBadge = getPlanBadge(org.plan_type);

        row.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap">
            <div>
              <div class="text-sm font-medium text-gray-900">${org.name}</div>
              <div class="text-sm text-gray-500">${org.description || 'No description'}</div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            ${planBadge}
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            ${statusBadge}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
            ${org.stats?.user_count || 0} users
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
            ${org.stats?.active_products || 0} products
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${formatDate(org.created_at)}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
            <button onclick="viewOrganization('${org.id}')" class="text-blue-600 hover:text-blue-900 mr-3">View</button>
            <button onclick="editOrganization('${org.id}')" class="text-green-600 hover:text-green-900 mr-3">Edit</button>
            <button onclick="deleteOrganization('${org.id}')" class="text-red-600 hover:text-red-900">Delete</button>
          </td>
        `;
        tbody.appendChild(row);
      });
    }

    function getStatusBadge(status) {
      const badges = {
        active: '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">Active</span>',
        inactive: '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">Inactive</span>',
        deleted: '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">Deleted</span>'
      };
      return badges[status] || '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">Unknown</span>';
    }

    function getPlanBadge(plan) {
      const badges = {
        free: '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">Free</span>',
        pro: '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">Pro</span>',
        business: '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-purple-100 text-purple-800">Business</span>',
        enterprise: '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-indigo-100 text-indigo-800">Enterprise</span>'
      };
      return badges[plan] || '<span class="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">Unknown</span>';
    }

    function formatDate(dateString) {
      return new Date(dateString).toLocaleDateString();
    }

    function updatePagination(pagination) {
      currentPage = pagination.page;
      
      const showingFrom = document.getElementById('showing-from');
      const showingTo = document.getElementById('showing-to');
      const totalOrgs = document.getElementById('total-orgs');
      const pageInfo = document.getElementById('page-info');
      
      if (showingFrom) showingFrom.textContent = ((currentPage - 1) * pagination.limit + 1).toString();
      if (showingTo) showingTo.textContent = Math.min(currentPage * pagination.limit, pagination.total).toString();
      if (totalOrgs) totalOrgs.textContent = pagination.total.toString();
      if (pageInfo) pageInfo.textContent = `Page ${currentPage}`;
    }

    function previousPage() {
      if (currentPage > 1) {
        loadOrganizations(currentPage - 1);
      }
    }

    function nextPage() {
      loadOrganizations(currentPage + 1);
    }

    // Modal functions
    function showCreateOrgModal() {
      const modal = document.getElementById('create-org-modal');
      if (modal) modal.classList.remove('hidden');
    }

    function hideCreateOrgModal() {
      const modal = document.getElementById('create-org-modal');
      const form = document.getElementById('create-org-form') as HTMLFormElement;
      
      if (modal) modal.classList.add('hidden');
      if (form) form.reset();
    }

    async function viewOrganization(orgId) {
      try {
        const response = await fetch('/api/organizations/get', {
          method: 'POST',
          headers: {
            'Authorization': 'Bearer admin-token',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ organization_id: orgId })
        });

        if (response.ok) {
          const data = await response.json();
          showOrgDetails(data.data.organization);
        } else {
          alert('Failed to load organization details');
        }
      } catch (error) {
        alert('Error loading organization details');
      }
    }

    function showOrgDetails(org) {
      const title = document.getElementById('org-details-title');
      if (title) title.textContent = org.name;
      
      const content = document.getElementById('org-details-content');
      if (!content) return;
      content.innerHTML = `
        <div>
          <h4 class="font-bold text-gray-900 mb-3">Organization Info</h4>
          <dl class="space-y-2">
            <dt class="text-sm font-medium text-gray-500">Name:</dt>
            <dd class="text-sm text-gray-900">${org.name}</dd>
            <dt class="text-sm font-medium text-gray-500">Description:</dt>
            <dd class="text-sm text-gray-900">${org.description || 'No description'}</dd>
            <dt class="text-sm font-medium text-gray-500">Plan:</dt>
            <dd class="text-sm text-gray-900">${org.plan_type}</dd>
            <dt class="text-sm font-medium text-gray-500">Status:</dt>
            <dd class="text-sm text-gray-900">${org.status}</dd>
            <dt class="text-sm font-medium text-gray-500">Created:</dt>
            <dd class="text-sm text-gray-900">${formatDate(org.created_at)}</dd>
          </dl>
        </div>
        <div>
          <h4 class="font-bold text-gray-900 mb-3">Usage Statistics</h4>
          <dl class="space-y-2">
            <dt class="text-sm font-medium text-gray-500">Total Users:</dt>
            <dd class="text-sm text-gray-900">${org.usage?.mail_accounts || 0}</dd>
            <dt class="text-sm font-medium text-gray-500">Mail Accounts:</dt>
            <dd class="text-sm text-gray-900">${org.usage?.mail_accounts || 0}</dd>
            <dt class="text-sm font-medium text-gray-500">SEO Sites:</dt>
            <dd class="text-sm text-gray-900">${org.usage?.seo_sites || 0}</dd>
            <dt class="text-sm font-medium text-gray-500">Analytics Events (30d):</dt>
            <dd class="text-sm text-gray-900">${org.usage?.analytics_events_month || 0}</dd>
            <dt class="text-sm font-medium text-gray-500">Storage Used:</dt>
            <dd class="text-sm text-gray-900">${org.usage?.storage_mb || 0} MB</dd>
          </dl>
        </div>
      `;
      
      const modal = document.getElementById('org-details-modal');
      if (modal) modal.classList.remove('hidden');
    }

    function hideOrgDetailsModal() {
      const modal = document.getElementById('org-details-modal');
      if (modal) modal.classList.add('hidden');
    }

    async function editOrganization(orgId) {
      // Implement edit functionality
      alert('Edit organization feature coming soon!');
    }

    async function deleteOrganization(orgId) {
      if (confirm('Are you sure you want to delete this organization? This action cannot be undone.')) {
        try {
          const response = await fetch('/api/organizations/delete', {
            method: 'POST',
            headers: {
              'Authorization': 'Bearer admin-token',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ organization_id: orgId })
          });

          if (response.ok) {
            alert('Organization deleted successfully');
            loadOrganizations();
          } else {
            alert('Failed to delete organization');
          }
        } catch (error) {
          alert('Error deleting organization');
        }
      }
    }

    // Form submission
    const createForm = document.getElementById('create-org-form') as HTMLFormElement;
    if (createForm) {
      createForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const nameEl = document.getElementById('org-name') as HTMLInputElement;
        const descEl = document.getElementById('org-description') as HTMLTextAreaElement;
        const planEl = document.getElementById('org-plan') as HTMLSelectElement;
        
        if (!nameEl || !descEl || !planEl) return;
        
        const name = nameEl.value;
        const description = descEl.value;
        const planType = planEl.value;
      
      try {
        const response = await fetch('/api/organizations/create', {
          method: 'POST',
          headers: {
            'Authorization': 'Bearer admin-token',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name,
            description: description || undefined,
            plan_type: planType
          })
        });

        if (response.ok) {
          alert('Organization created successfully');
          hideCreateOrgModal();
          loadOrganizations();
        } else {
          const error = await response.json();
          alert(error.message || 'Failed to create organization');
        }
        } catch (error) {
          alert('Error creating organization');
        }
      });
    }

    // Load organizations on page load
    document.addEventListener('DOMContentLoaded', function() {
      loadOrganizations();
    });
  </script>

  <style>
    .btn {
      @apply inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors;
    }
    
    .btn-primary {
      @apply text-white bg-blue-600 hover:bg-blue-700 focus:ring-blue-500;
    }
    
    .btn-secondary {
      @apply text-gray-700 bg-white hover:bg-gray-50 border-gray-300 focus:ring-blue-500;
    }
    
    .form-select {
      @apply rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500;
    }
  </style>
</Layout>
